# -*- coding: utf-8 -*-
"""KNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kp56TWH2OklK4vQeirbSwQ7iipanYkib
"""

from mlxtend.plotting import plot_decision_regions
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn import metrics
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
sns.set()
import warnings
warnings.filterwarnings('ignore')

#membaca data dari file CSV
dataset = pd.read_csv('tbc.csv')

dataset['cough for two weeks'] = dataset['cough for two weeks'].astype('object')
dataset['weight loss'] = dataset['weight loss'].astype('object')
dataset['loss of appetite'] = dataset['loss of appetite'].astype('object')
dataset['night sweats'] = dataset['night sweats'].astype('object')
dataset['TB contact history'] = dataset['TB contact history'].astype('object')
dataset['cough with phlegm'] = dataset['cough with phlegm'].astype('object')
dataset['coughing blood'] = dataset['coughing blood'].astype('object')
dataset['BCG results appear fast'] = dataset['BCG results appear fast'].astype('object')
dataset['lumps that appear around the armpits and neck'] = dataset['lumps that appear around the armpits and neck'].astype('object')

df = pd.DataFrame(dataset)

# Memisahkan kolom 'Gender' menjadi dua kolom terpisah: 'laki-laki' dan 'perempuan'
# Kolom 'laki-laki' berisi 1 jika jenis kelamin laki-laki, 0 jika bukan
# Kolom 'perempuan' berisi 1 jika jenis kelamin perempuan, 0 jika bukan
df[['laki-laki', 'perempuan']] = pd.get_dummies(df['sex'])

# Simpan kolom 'Gender' ke variabel terpisah
kolom_gender_laki = df['laki-laki']
kolom_gender_perempuan = df['perempuan']

# Hapus kolom 'Gender' dari DataFrame
df.drop(columns=['laki-laki'], inplace=True)
df.drop(columns=['perempuan'], inplace=True)

# Masukkan kolom 'Gender' ke posisi pertama dalam DataFrame
df.insert(0, 'laki-laki', kolom_gender_laki)
df.insert(0, 'perempuan', kolom_gender_perempuan)

# Menghapus kolom 'Gender' dari DataFrame
df.drop(columns=['sex'], inplace=True)

df.info()

le = LabelEncoder()

# Melakukan label encoding untuk fitur 'result'
df['result'] = le.fit_transform(df['result'])

X = df
y = df.result

#importing train_test_split
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=1/3,random_state=42, stratify=y)

print('Train set:', X_train.shape, y_train.shape)
print('Test set:', X_test.shape, y_test.shape)

#menyimpan score akurasi
test_scores = []
train_scores = []

for i in range(1,15):

    knn = KNeighborsClassifier(i)
    knn.fit(X_train,y_train)
    knn.score(X_test,y_test)

    train_scores.append(knn.score(X_train,y_train))
    test_scores.append(knn.score(X_test,y_test))

# Memilih nilai k yang terbaik
best_k = test_scores.index(max(test_scores)) + 1

# Membuat model KNeighborsClassifier dengan k terbaik
knn = KNeighborsClassifier(best_k)
knn.fit(X_train, y_train)

# Memprediksi kelas untuk data uji
y_pred = knn.predict(X_test)

# Menghitung akurasi model
accuracy = accuracy_score(y_test, y_pred)
print("Akurasi pada Data Uji:", accuracy)

#let us get the predictions using the classifier we had fit above
y_pred = knn.predict(X_test)
confusion_matrix(y_test,y_pred)
pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['result'], margins=True)

y_pred = knn.predict(X_test)
cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
p = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Result label')

plt.savefig('knn/conmat-knn.png')  # Menyimpan gambar sebagai file PNG
plt.show()

#import classification_report
from sklearn.metrics import classification_report
classification_report_str = classification_report(y_test,y_pred)

# Menyimpan informasi lainnya ke dalam file pickle
pickle_data = {
    'best_knn' : knn,
    'confusion_matrix': "knn/conmat-knn.png",
    'accuracy': accuracy,
    'classification_report': classification_report
}

with open('data_file.pkl', 'wb') as f:
    pickle.dump(pickle_data, f)
    
# Simpan akurasi ke dalam file pickle
with open('akurasiakhir-knn.pkl', 'wb') as f1:
    pickle.dump(accuracy, f1)

# Simpan classification report ke dalam file pickle
with open('cfreport-knn.pkl', 'wb') as f2:
    pickle.dump(classification_report_str, f2)

# Creating a pickle file for the classifier
filename = 'tbc-knn'
pickle.dump(knn, open(filename, 'wb'))

