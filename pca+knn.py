# -*- coding: utf-8 -*-
"""pca+knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10XenWGC-7oaaxnzonKSfw9oCP1ircuwQ
"""

import numpy as np # linear algebra
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pickle
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.neighbors import KNeighborsClassifier

from subprocess import check_output

URL = ('tbc.csv')

dataset = pd.read_csv(URL)

dataset['cough for two weeks'] = dataset['cough for two weeks'].astype('object')
dataset['weight loss'] = dataset['weight loss'].astype('object')
dataset['loss of appetite'] = dataset['loss of appetite'].astype('object')
dataset['night sweats'] = dataset['night sweats'].astype('object')
dataset['TB contact history'] = dataset['TB contact history'].astype('object')
dataset['cough with phlegm'] = dataset['cough with phlegm'].astype('object')
dataset['coughing blood'] = dataset['coughing blood'].astype('object')
dataset['BCG results appear fast'] = dataset['BCG results appear fast'].astype('object')
dataset['lumps that appear around the armpits and neck'] = dataset['lumps that appear around the armpits and neck'].astype('object')

df = pd.DataFrame(dataset)

# Memisahkan kolom 'Gender' menjadi dua kolom terpisah: 'laki-laki' dan 'perempuan'
# Kolom 'laki-laki' berisi 1 jika jenis kelamin laki-laki, 0 jika bukan
# Kolom 'perempuan' berisi 1 jika jenis kelamin perempuan, 0 jika bukan
df[['laki-laki', 'perempuan']] = pd.get_dummies(df['sex'])

# Simpan kolom 'Gender' ke variabel terpisah
kolom_gender_laki = df['laki-laki']
kolom_gender_perempuan = df['perempuan']

# Hapus kolom 'Gender' dari DataFrame
df.drop(columns=['laki-laki'], inplace=True)
df.drop(columns=['perempuan'], inplace=True)

# Masukkan kolom 'Gender' ke posisi pertama dalam DataFrame
df.insert(0, 'laki-laki', kolom_gender_laki)
df.insert(0, 'perempuan', kolom_gender_perempuan)

# Menghapus kolom 'Gender' dari DataFrame
df.drop(columns=['sex'], inplace=True)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

# Melakukan label encoding untuk fitur 'result'
df['result'] = le.fit_transform(df['result'])

# Memisahkan fitur dan target
X = df.drop(columns=['result'])
y = df['result']

# Membagi data menjadi data pelatihan dan pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1/3, random_state=42)

# Standarisasi fitur-fitur
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Membuat DataFrame dari data
df = pd.DataFrame(X_scaled)

# Path file CSV yang akan dibuat
csv_file = 'standarisasi.csv'

# Menulis DataFrame ke dalam file CSV
df.to_csv(csv_file, index=False)

# Melakukan PCA
pca = PCA(n_components=11)  # Ubah jumlah komponen sesuai kebutuhan
X_train_pca = pca.fit_transform(X_train_scaled)
X_test_pca = pca.transform(X_test_scaled)

print(pca.explained_variance_ratio_)

pca = PCA(11)
pca_full = pca.fit(X_train)

plt.plot(np.cumsum(pca_full.explained_variance_ratio_))
plt.xlabel('# of components')
plt.ylabel('Cumulative explained variance')
plt.savefig('cevr-algo.png')  # Menyimpan gambar sebagai file PNG
plt.show()

# Melatih model KNN
model = KNeighborsClassifier(n_neighbors=10)  # Atur jumlah tetangga sesuai kebutuhan
model.fit(X_train_pca, y_train)

components = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
neighbors = [1, 2, 3, 4, 5, 6, 7]

scores = np.zeros( (components[len(components)-1]+1, neighbors[len(neighbors)-1]+1 ) )

# Menguji model KNN
y_pred = model.predict(X_test_pca)

from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score

# Misalkan X_test dan y_test adalah data uji dan label sebenarnya
# Lakukan prediksi menggunakan model yang telah dilatih
predictions = model.predict(X_test_pca)

# Hitung akurasi dari prediksi
accuracy = accuracy_score(y_test, predictions)

# Cetak akurasi
print("Akurasi model: {:.2f}%".format(accuracy * 100))

#import confusion_matrix
from sklearn.metrics import confusion_matrix

#let us get the predictions using the classifier we had fit above
y_pred = model.predict(X_test_pca)
confusion_matrix(y_test,y_pred)
pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['result'], margins=True)

y_pred = model.predict(X_test_pca)

from sklearn import metrics

cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
p = sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Result label')

plt.savefig('conmat-gab.png', dpi=300)
plt.show()

# Evaluasi model, misalnya dengan menggunakan classification_report
from sklearn.metrics import classification_report

classification_report_str = classification_report(y_test,y_pred)
print(classification_report(y_test, y_pred))

# Simpan data ke dalam objek
data_to_pickle = {
    'predictions' : predictions,
    'accuracy': accuracy,
    'confusion_matrix': "knnpca/conmat-gab.png",
    'classification_report': classification_report_str
}

with open('data_file_gab.pkl', 'wb') as f4:
    pickle.dump(data_to_pickle, f4)

# Simpan akurasi ke dalam file pickle
with open('akurasiakhirgab.pkl', 'wb') as f5:
    pickle.dump(accuracy, f5)

# Simpan classification report ke dalam file pickle
with open('cfreportgab.pkl', 'wb') as f6:
    pickle.dump(classification_report_str, f6)

# Creating a pickle file for the classifier
prediksi = 'tbc-gab.pkl'
pickle.dump(predictions, open(prediksi, 'wb'))